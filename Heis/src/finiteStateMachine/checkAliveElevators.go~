package finiteStateMachine


func isElevatorInList(elevatorIP string) int {
	for i:=0; i<defines.NumberOfElevators; i++ {
		if ElevatorStatus.ActiveElevators[i] == elevatorIP {
			return i
		}
	}
	return -1
}

func addElevator(elevatorIP string) int {
	alreadyAdded	:= false
	full			:= true
	nextIndex		:= 0
	for i:=defines.NumberOfElevators-1; i>-1; i-- {
		if ElevatorStatus.ActiveElevators[i] == elevatorIP {
			alreadyAdded = true
		}
		if ElevatorStatus.ActiveElevators[i] == "empty" {
			full = false
			nextIndex = i
		}
	}
	if !alreadyAdded && !full {
		ElevatorStatus.ActiveElevators[nextIndex] = elevatorIP
		return nextIndex
	}
	return -1
}		

func removeElevator(elevatorN int) {
	ElevatorStatus.ActiveElevators[elevatorN] = "empty"
}

func CheckAliveElevators(receiveAliveMessageChan chan string, elevatorTimerChan chan int, sendChan chan []byte) {
	var elevatorIP	string
	var elevatorN	int
	for {
		select {
		case elevatorIP = <- receiveAliveMessageChan:
			elevatorIP = elevatorIP[0:15]
			elevatorN = isElevatorInList(elevatorIP)
			if elevatorN == -1 {
				elevatorN = addElevator(elevatorIP)
				sendChan <- wrapMessage("updateAwokenElevator", 0, "", 0)
			}
			elevatorTimerChan <- elevatorN
			
		case elevatorN = <- elevatorTimerChan:
			removeElevator(elevatorN)
			var lowestIPindex = 0
			var lowestIP = ElevatorStatus.ActiveElevators[0]
			for i:=0; i<defines.NumberOfElevators; i++ {
				if ElevatorStatus.ActiveElevators[i] < lowestIP {
					lowestIP = ElevatorStatus.ActiveElevators[i]
					lowestIPindex = i
				}
			}	
			for i:=0; i<defines.NumberOfFloors; i++ {
				if ElevatorStatus.OrdersUp[elevatorN][i] == 1	{
					if lowestIPindex == 0 {
						sendChan <- wrapMessage("newOrder", 0, lowestIP, i)
					}
					ElevatorStatus.OrdersUp[elevatorN][i] = 0
				}
				if ElevatorStatus.OrdersDown[elevatorN][i] == 1	{
					if lowestIPindex == 0 {
						sendChan <- wrapMessage("newOrder", 1, lowestIP, i)
					}
					ElevatorStatus.OrdersDown[elevatorN][i] = 0
				}
			}
		}
	}
}









